# grub.cfg
#
# 1. Find the directory ${ISO_Directory} in the partition that has the filesystem
#    label ${Boot_ISO_Filesystem_Label}, and is the 3rd partition of the GPT partitioned drive,
# 2. iterate over files with the extention .iso under the directory ${ISO_Directory},
# 3. create a menuentry for each of /boot/grub/loopback.cfg found in the .iso file,
# 4. and import the /boot/grub/loopback.cfg nested within the menuentry.
#
# The user first chooses which ISO file to boot from, so you will see two menus:
# one for choosing the ISO, another for the boot options within the ISO live system.
#
# Reference:
# https://supergrubdisk.org/wiki/Loopback.cfg
#

insmod part_gpt
insmod fat
insmod ext2
insmod iso9660
insmod loopback
insmod udf
insmod regexp

set pager=1
#set debug=partition,init,linux,video,fs

set timeout=-1

loadfont unicode
if [ "${grub_platform}" == 'efi' ]; then
    insmod efi_gop
    insmod efi_uga
else
    insmod vbe
fi
insmod gfxterm
set gfxmode=auto
set gfxpayload=keep
terminal_output gfxterm

# the filesystem label of the partition where boot ISO files are stored.
set Boot_ISO_Filesystem_Label='Boot-ISO'
# the partition device where boot ISO files are stored. (just to make sure.)
set Boot_ISO_Partition_Number='hd0,gpt3'
# the directory where all live Linux ISO files are found within the partition ${Boot_ISO_Filesystem_Label}
set ISO_Directory='/isos'

# search for the partition that has the filesystem label ${Boot_ISO_Filesystem_Label}, and
# assign the environment variable root to the found partition.
#search --set=root --label "${Boot_ISO_Filesystem_Label}"
search --set=root --label "${Boot_ISO_Filesystem_Label}" --hint "${Boot_ISO_Partition_Number}"
# the below line should work as well as the above but having an explicit filesystem label helps users.
#set root="${Boot_ISO_Partition_Number}"


function iterate_iso {
    set iso_dir="$1"
    # iterate through the files under the given directory ${iso_dir}
    for file in "${iso_dir}"/*; do
        # single quotes prevent escape and variable/wildcard expansion
        regexp --set name '([^/]+)\.[Ii][Ss][Oo]$' "${file}"
        if ! test -z "${name}"; then
            # attach a loopback device loop to the filesystem on ${file}
            echo "attaching a loopback device to the filesystem on ${file}"
            loopback loop "${file}"
            # load loopback.cfg in the content of ${file} nesting within a menuentry
            check_known_iso_configs "${file}"
            # detach the loopback device
            echo "detaching the loopback device from ${file}"
            loopback --delete loop
            unset name
        else
            # ${file} doesn't match .iso
            echo "skipping ${file}"
        fi
    done
}

function check_known_iso_configs {
    set iso_file="$1"
    # get the label of the device (loop)
    probe --set iso_label --label (loop)
    echo -e "\tlabel is ${iso_label}"

    if test -f (loop)/boot/grub/loopback.cfg; then    # Debian Live, Ubuntu Live, Mint Live, Kali, Puppy
        include_loopback_cfg "${iso_file}" "/boot/grub/loopback.cfg"
    elif test -f (loop)/boot/loopback.cfg; then    #
        include_loopback_cfg "${iso_file}" "/boot/loopback.cfg"
    else
        echo -e "\terror: No loopback.cfg or known grub.cfg found within the iso file, press enter to skip ..."
        read
    fi
}

function include_loopback_cfg {
    set iso_file="$1"
    set config_file="$2"
    echo -e "\t${config_file} detected"
    menuentry "${iso_file} (${config_file})" "${iso_file}" "${config_file}" {
        set iso_file="$2"    # note: $1 is the menuentry title
        set config_file="$3"
        # iso_path is referenced within (loop)/boot/grub/grub.cfg
        # export iso_path for the nested configfile call
        set iso_path="${iso_file}"
        export iso_path
        echo -e "\troot: ${root}"
        echo -e "\tiso_path: ${iso_path}"
        echo -e "\tconfig_file: ${config_file}"
        insmod linux
        set old_root="${root}"
        # attach a loopback device loop to the filesystem on ${iso_file}
        echo -e "\tattaching a loopback device to the filesystem on ${iso_file}"
        loopback loop "${iso_file}"
        # set the root device to the loop device
        set root=(loop)
        # include ${config_file} in the loopback device
        echo -e "\tincluding ${config_file} in ${iso_file}"
        configfile "${config_file}"
        # in case the user quit loopback.cfg by esc
        set root="${old_root}"
        # detach the loopback device
        echo -e "\tdetaching the loopback device from ${iso_file}"
        loopback --delete loop
        #<debug>
        #echo -e "\tenter to continue .."
        #read
        #</debug>
    }
}

# find ISO files under ${ISO_Directory} and load grub configuration
if test -d "${ISO_Directory}"; then
    iterate_iso "${ISO_Directory}"
fi

#<debug>
echo scan completed, press enter to continue ...
read
#</debug>

menuentry halt { halt }
menuentry reboot { reboot }

# end of file
